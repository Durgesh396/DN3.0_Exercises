Exercise 5: Triggers

* Scenario 1: Update last modified date for customers.

CREATE OR REPLACE TRIGGER UpdateCustomerLastModified
BEFORE UPDATE ON Customers
FOR EACH ROW
BEGIN
    :NEW.LastModified := SYSDATE;
END;

* Scenario 2: Maintain audit log for transactions.

CREATE OR REPLACE TRIGGER LogTransaction
AFTER INSERT ON Transactions
FOR EACH ROW
BEGIN
    INSERT INTO AuditLog (TransactionID, AccountID, Amount, TransactionDate)
    VALUES (:NEW.TransactionID, :NEW.AccountID, :NEW.Amount, :NEW.TransactionDate);
END;

* Scenario 3: Enforce business rules on deposits and withdrawals.

CREATE OR REPLACE TRIGGER CheckTransactionRules
BEFORE INSERT ON Transactions
FOR EACH ROW
BEGIN
    IF :NEW.Amount < 0 THEN
        SELECT Balance INTO v_Balance FROM Accounts WHERE AccountID = :NEW.AccountID;
        IF v_Balance + :NEW.Amount < 0 THEN
            RAISE_APPLICATION_ERROR(-20004, 'Withdrawal exceeds balance.');
        END IF;
    ELSIF :NEW.Amount = 0 THEN
        RAISE_APPLICATION_ERROR(-20005, 'Deposit amount must be positive.');
    END IF;
END;




