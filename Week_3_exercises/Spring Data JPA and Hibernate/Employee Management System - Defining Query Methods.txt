Exercise 5: Employee Management System - Defining Query Methods.

1.Defining Query Methods:

Employee Repository:

package com.example.employeemanagementsystem.repository;

import com.example.employeemanagementsystem.model.Employee;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;

public interface EmployeeRepository extends JpaRepository<Employee, Long> {

    List<Employee> findByName(String name);

    List<Employee> findByEmailEndingWith(String domain);

    List<Employee> findByDepartmentName(String departmentName);

    List<Employee> findByNameAndEmail(String name, String email);
}

Methods:
* findByName: Finds employees with the specified name.
* findByEmailEndingWith: Finds employees whose email ends with the specified domain.
* findByDepartmentName: Finds employees by their associated department name.
* findByNameAndEmail: Finds employees matching both name and email.

Department Repository:

package com.example.employeemanagementsystem.repository;

import com.example.employeemanagementsystem.model.Department;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;

public interface DepartmentRepository extends JpaRepository<Department, Long> {

   Department findByName(String name);

   List<Department> findByNameStartingWith(String prefix);

   List<Department> findByNameContaining(String keyword);
}

Methods:

* findByName: Finds a department with the specified name.
* findByNameStartingWith: Finds departments whose names start with a specific prefix.
* findByNameContaining: Finds departments whose names contain a specific keyword.

Using the @Query Annotation:

package com.example.employeemanagementsystem.repository;

import com.example.employeemanagementsystem.model.Employee;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import java.util.List;

public interface EmployeeRepository extends JpaRepository<Employee, Long> {

    @Query("SELECT e FROM Employee e WHERE e.email LIKE %:domain")
    List<Employee> findEmployeesByEmailDomain(@Param("domain") String domain);

    @Query("SELECT e FROM Employee e WHERE e.department.name = :departmentName")
    List<Employee> findEmployeesByDepartmentName(@Param("departmentName") String departmentName);
}

Employee Entity with Named Queries:

package com.example.employeemanagementsystem.model;

import jakarta.persistence.*;

@Entity
@Table(name = "employees")
@NamedQueries({
    @NamedQuery(
        name = "Employee.findByName",
        query = "SELECT e FROM Employee e WHERE e.name = :name"
    ),
    @NamedQuery(
        name = "Employee.findByEmailDomain",
        query = "SELECT e FROM Employee e WHERE e.email LIKE %:domain"
    )
})
public class Employee {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;
    private String email;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "department_id")
    private Department department;

 }

Employee Repository Using Named Queries:

package com.example.employeemanagementsystem.repository;

import com.example.employeemanagementsystem.model.Employee;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import java.util.List;

public interface EmployeeRepository extends JpaRepository<Employee, Long> {

    @Query(name = "Employee.findByName")
    List<Employee> findByName(@Param("name") String name);

    @Query(name = "Employee.findByEmailDomain")
    List<Employee> findByEmailDomain(@Param("domain") String domain);
}








